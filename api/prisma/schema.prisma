generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tokens {
  id                 Int     @id @default(autoincrement())
  refreshtoken       String? @unique
  confirmationToken  String? @unique
  resetPasswordToken String? @unique

  userId String @unique @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id         Int      @id @default(autoincrement())
  photo      String?
  background String?
  bio        String?
  from       String?  @db.VarChar(50)
  site       String?  @db.VarChar(40)
  url        String?
  createdAt  DateTime @default(now())
  userId     String   @unique @db.VarChar(36)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String  @id @unique @db.VarChar(36)
  name     String  @db.VarChar(50)
  email    String  @unique @db.VarChar(50)
  password String? @db.VarChar(70)
  verified Boolean @default(false)
  type     String  @db.VarChar(15)

  profile  Profile?
  token    Tokens?
  posts    Post[]
  comments Comment[]
}

model Post {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  content   String?  @db.Text
  createdAt DateTime @default(now())

  userId String @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())

  userId String @db.VarChar(36)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId Int?
  parent   Comment?  @relation("CommentParent", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[] @relation("CommentParent")
}