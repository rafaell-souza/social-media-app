generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  oauth_account
  system_account
}

model User {
  id        String   @id @unique @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  first_name String      @db.VarChar(50)
  last_name  String      @db.VarChar(50)
  email      String      @unique @db.VarChar(50)
  password   String?     @db.VarChar(70)
  type       AccountType
  verified   Boolean     @default(false)

  profile   Profile?
  token     Token?
  posts     Post[]
  comments  Comment[]
  followers Follower[] @relation("followerRelation")
  following Follower[] @relation("followingRelation")
  reactions Reaction[]
}

model Token {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLogoutAt DateTime?

  hashedRt String? @unique
  hashedCt String? @unique

  owner_id String @unique @db.VarChar(36)
  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo      String?
  background String?
  bio        String?
  from       String? @db.VarChar(50)
  site       String? @db.VarChar(40)
  url        String?

  owner_id String @unique @db.VarChar(36)
  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text    String  @db.Text
  content String? @db.Text

  owner_id String @db.VarChar(36)
  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text    String
  content String?

  author_id String @db.VarChar(36)
  author    User   @relation(fields: [author_id], references: [id], onDelete: Cascade)

  post_id Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  parent_Id Int?
  parent    Comment? @relation("CommentParent", fields: [parent_Id], references: [id], onDelete: Cascade)

  children  Comment[]  @relation("CommentParent")
  reactions Reaction[]
}

model Follower {
  id Int @id @default(autoincrement())

  follower_Id String @db.VarChar(36)
  follower    User   @relation("followerRelation", fields: [follower_Id], references: [id], onDelete: Cascade)

  following_Id String @db.VarChar(36)
  following    User   @relation("followingRelation", fields: [following_Id], references: [id], onDelete: Cascade)

  @@unique([follower_Id, following_Id])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  post_Id Int?
  Post    Post? @relation(fields: [post_Id], references: [id])

  comment_id Int?
  Comment    Comment? @relation(fields: [comment_id], references: [id])

  user_id String @db.VarChar(36)
  User    User?  @relation(fields: [user_id], references: [id])

  @@unique([user_id, comment_id])
  @@unique([user_id, post_Id])
}